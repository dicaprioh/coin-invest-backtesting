name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'data/**'
      - 'requirements.txt'
      - '*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'data/**'
      - 'requirements.txt'
      - '*.py'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort mypy
      
      - name: Lint with flake8
        run: |
          flake8 data/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 data/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check code formatting with black
        run: black --check data/
      
      - name: Check import sorting with isort
        run: isort --check-only data/
      
      - name: Type check with mypy
        run: mypy data/ --ignore-missing-imports
      
      - name: Test imports
        run: python -c "from data.okx_data_fetcher import fetch_okx_data; print('Import successful')"
      
      - name: Run tests (if any)
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=data --cov-report=xml
          else
            echo "No tests directory found, skipping tests"
          fi
      
      - name: Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml
          flags: backend
          name: backend-coverage
  
  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit
      
      - name: Run safety check
        run: safety check
      
      - name: Run bandit security scan
        run: bandit -r data/ -f json -o bandit-report.json || true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: bandit-report.json
  
  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create Dockerfile for backend
        run: |
          cat > Dockerfile.backend << EOF
          FROM python:3.11-slim
          
          WORKDIR /app
          
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          COPY data/ ./data/
          
          CMD ["python", "-c", "from data.okx_data_fetcher import fetch_okx_data; print('Backend ready')"]
          EOF
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/coin-invest-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/coin-invest-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max